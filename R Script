# Package library
library(rpart)
library(kernlab)
library(caret)
library(lattice)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(corrplot)
library(quanteda)
library(quanteda.textplots)

#Comment
# Convert Spotify CSV into dataframe
Spotify_data_raw <- read.csv("C:/Users/gsgro/OneDrive/Desktop/Syr_MSBA/Term 2/Data Science/Final Project/Spotify Dataset.csv")

# Review Spotify data
summary(Spotify_data_raw)
str(Spotify_data_raw)
head(Spotify_data_raw)

#Review Metrics


# Update column names
spotify_data_clean <- Spotify_data_raw %>%
  rename(Song_Title = track_name, 
         Artist_Name = artist.s._name, 
         Artist_Count = artist_count, 
         Song_Release_Year = released_year, 
         Song_Release_Month = released_month, 
         Song_Release_Day = released_day,
         Spotify_Playlist_Count = in_spotify_playlists,
         Spotify_Charts_Count = in_spotify_charts,
         Total_Streams = streams,
         Apple_Playlist_Count = in_apple_playlists,
         Apple_Charts_Count = in_apple_charts,
         Deezer_Playlist_Count = in_deezer_playlists,
         Deezer_Charts_Count = in_deezer_charts,
         Shazam_Charts_Count = in_shazam_charts,
         Beats_per_Minute = bpm,
         Key = key,
         Mode = mode,
         Danceability = danceability_.,
         Valence = valence_.,
         Energy = energy_.,
         Acousticness = acousticness_.,
         Instrumentalness = instrumentalness_.,
         Liveness = liveness_.,
         Speechiness = speechiness_.)

# Combine Release year, month, and day into one column
spotify_data_clean$Song_Release_Date <- as.Date(paste(spotify_data_clean$Song_Release_Year, 
                                           spotify_data_clean$Song_Release_Month, 
                                           spotify_data_clean$Song_Release_Day, sep = "-"))

# Delete Release year, month, and day from dataframe
spotify_data_clean <- spotify_data_clean %>%
  select(-Song_Release_Year, -Song_Release_Month, -Song_Release_Day)

# Convert from character to numeric
spotify_data_clean$Total_Streams <- as.numeric(spotify_data_clean$Total_Streams)

# Add column that calculates how many days its been since the song was released
spotify_data_clean$Days_Since_Today <- as.numeric(Sys.Date() - spotify_data_clean$Song_Release_Date)

# Remove unnecessary columns
spotify_data_clean <- subset(spotify_data_clean, select = -c(Artist_Count, Key, Mode))

# Rearrange column order
spotify_data_clean <- spotify_data_clean[, c("Song_Title",
                                             "Artist_Name",
                                             "Song_Release_Date",
                                             "Days_Since_Today",
                                             "Spotify_Playlist_Count",
                                             "Spotify_Charts_Count",
                                             "Total_Streams",
                                             "Apple_Playlist_Count",
                                             "Apple_Charts_Count",
                                             "Deezer_Playlist_Count",
                                             "Deezer_Charts_Count",
                                             "Shazam_Charts_Count",
                                             "Beats_per_Minute",
                                             "Danceability",
                                             "Valence",
                                             "Energy",
                                             "Acousticness",
                                             "Instrumentalness",
                                             "Liveness",
                                             "Speechiness")]

# NA Check and Removal
na_indices <- which(is.na(spotify_data_clean$Total_Streams))
na_indices

spotify_data_clean$Total_Streams[is.na(spotify_data_clean$Total_Streams)] <- 0

#Linear Regression with all variables
linear_regression1 <- lm(formula = Total_Streams ~ Beats_per_Minute + Danceability + Valence + Energy + Acousticness + Instrumentalness + Liveness + Speechiness, data = spotify_data_clean)
summary(linear_regression1)

# Graph Actual vs Predicted
predicted_values <- data.frame(Observed = spotify_data_clean$Total_Streams, Predicted = predict(linear_regression1))

ggplot(predicted_values, aes(x = Observed, y = Predicted)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "blue") +
  labs(title = "Scatter Plot of Observed vs Predicted Values", x = "Actual Total Streams", y = "Predicted Total Streams")

# Revised linear regression model with 0 intercept
linear_regression2 <- lm(formula = Total_Streams ~ 0+ Beats_per_Minute + Danceability + Valence + Energy + Acousticness + Instrumentalness + Liveness + Speechiness, data = spotify_data_clean)
summary(linear_regression2)

#Revised linear regression with selected factors that we find to be significant with 0 intercept
linear_regression3 <- lm(formula = Total_Streams ~ 0+ Beats_per_Minute + Energy + Acousticness +Speechiness, data = spotify_data_clean)
summary(linear_regression3)

#With a high stream amount and the variables in % form, the log of total streams was taken
linear_regression4 <- lm(formula = log1p(Total_Streams) ~ 0+ Beats_per_Minute + Energy + Acousticness +Speechiness, data = spotify_data_clean)
summary(linear_regression4)
#Examine difference in charts vs streams and compare to other platforms
#Spotify
linear_regression5 <- lm(formula = Spotify_Charts_Count~ 0+ Beats_per_Minute + Energy + Acousticness +   Speechiness, data = spotify_data_clean)
summary(linear_regression5)
#Apple
linear_regression6 <- lm(formula = Apple_Charts_Count~ 0+ Beats_per_Minute + Energy + Acousticness +   Speechiness, data = spotify_data_clean)
summary(linear_regression6)
#Deezer
linear_regression7 <- lm(formula = Deezer_Charts_Count~ 0+ Beats_per_Minute + Energy + Acousticness +   Speechiness, data = spotify_data_clean)
summary(linear_regression7)

#Review taking the log of charts vs streams and compare to other platforms
#Spotify
linear_regression8<- lm(formula = log1p(Spotify_Charts_Count)~ 0+ Beats_per_Minute + Energy + Acousticness +   Speechiness, data = spotify_data_clean)
summary(linear_regression8)
#Apple
linear_regression9 <- lm(formula = log1p(Apple_Charts_Count)~ 0+ Beats_per_Minute + Energy + Acousticness +   Speechiness, data = spotify_data_clean)
summary(linear_regressionn9)
#Deezer
linear_regression10 <- lm(formula = log1p(Deezer_Charts_Count)~ 0+ Beats_per_Minute + Energy + Acousticness +   Speechiness, data = spotify_data_clean)
summary(linear_regression10)

# Create numeric DF to user for correlation analysis
Spotify_data_correlation <- subset(spotify_data_clean, select = -c(Song_Title, Artist_Name, Song_Release_Date, Days_Since_Today, Spotify_Playlist_Count, Spotify_Charts_Count, Apple_Playlist_Count, Apple_Charts_Count, Deezer_Playlist_Count, Deezer_Charts_Count, Shazam_Charts_Count))

# Correlation analysis
correlation_analysis <- cor(Spotify_data_correlation)
correlation_analysis

# Word cloud
spotify_corpus <- corpus(spotify_data_clean$Song_Title)
sotify_corpus <- tokens(spotify_corpus) %>%
  tokens_remove(stopwords("en"))
print(spotify_corpus)

spotify_matrix <- dfm(spotify_corpus)
head(spotify_matrix)
#Reviewed to remove additional words, Spanish stopword, errors, explicit
spotify_dtm <- dfm(spotify_corpus, stem = TRUE, remove_punct = TRUE, remove=c(stopwords("english"),stopwords("spanish"), "que", "un", "la", "feat", "remix", "explicit", "ver", "ella","ï¿½"))
spotify_dtm
spotify_dtm <- dfm_trim(spotify_dtm, min_termfreq = 2)
spotify_dtm
#Wordcloud
textplot_wordcloud(spotify_dtm)
#view(spotify_data_clean)
webWords <- as.matrix(spotify_dtm)
str(webWords)

wordCounts <- colSums(webWords)
wordCounts <- sort(wordCounts, decreasing = TRUE)
head(wordCounts, 20)
